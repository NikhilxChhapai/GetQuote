import jsPDF from 'jspdf';

export interface PDFQuotationData {
  type: 'box' | 'brochure' | 'digital-print' | 'paper-bag';
  quoteRef: string;
  userName: string;
  specifications: Record<string, any>;
  costBreakdown: {
    items: Array<{ label: string; value: number; isSubtotal?: boolean }>;
    subtotal: number;
    gstAmount: number;
    gstRate: number;
    shippingCharges: number;
    shippingWeight: number;
    isFreeShipping: boolean;
    finalTotal: number;
    perUnitCost: number;
    quantity: number;
  };
  addOns?: Array<{ description: string; cost: number }>;
  treatments?: Array<{ name: string; cost: number }>;
}

export class PDFGenerator {
  private doc: jsPDF;
  private yPos: number = 20;
  private pageWidth: number = 210; // A4 width in mm
  private pageHeight: number = 297; // A4 height in mm
  private margin: number = 20;

  // Color scheme
  private colors = {
    primary: [0, 102, 204], // Blue
    secondary: [108, 117, 125], // Gray
    success: [40, 167, 69], // Green
    accent: [255, 193, 7], // Yellow
    text: [33, 37, 41], // Dark gray
    lightGray: [248, 249, 250], // Light gray
    white: [255, 255, 255]
  };

  constructor() {
    this.doc = new jsPDF();
  }

  // Set color helper
  private setColor(color: number[], type: 'text' | 'fill' | 'draw' = 'text') {
    if (type === 'text') {
      this.doc.setTextColor(color[0], color[1], color[2]);
    } else if (type === 'fill') {
      this.doc.setFillColor(color[0], color[1], color[2]);
    } else {
      this.doc.setDrawColor(color[0], color[1], color[2]);
    }
  }

  // Add header with company branding
  private addHeader(data: PDFQuotationData) {
    // Background header
    this.setColor(this.colors.primary, 'fill');
    this.doc.rect(0, 0, this.pageWidth, 50, 'F');

    // Company name
    this.doc.setFontSize(24);
    this.setColor(this.colors.white);
    this.doc.text('ROYAL BOX CALCULIST', this.margin, 25);

    // Quotation type
    this.doc.setFontSize(14);
    const typeNames = {
      'box': 'BOX PACKAGING QUOTATION',
      'brochure': 'BROCHURE PRINTING QUOTATION', 
      'digital-print': 'DIGITAL PRINT QUOTATION',
      'paper-bag': 'PAPER BAG QUOTATION'
    };
    this.doc.text(typeNames[data.type], this.margin, 35);

    // Quote reference and date (right aligned)
    this.doc.setFontSize(10);
    const today = new Date();
    const dateStr = today.toLocaleDateString('en-IN');
    const timeStr = today.toLocaleTimeString('en-IN');
    
    this.doc.text(`Quote Ref: ${data.quoteRef}`, this.pageWidth - this.margin, 25, { align: 'right' });
    this.doc.text(`Date: ${dateStr}`, this.pageWidth - this.margin, 32, { align: 'right' });
    this.doc.text(`Time: ${timeStr}`, this.pageWidth - this.margin, 39, { align: 'right' });

    this.yPos = 60;
  }

  // Add customer info section
  private addCustomerInfo(data: PDFQuotationData) {
    // Customer section background
    this.setColor(this.colors.lightGray, 'fill');
    this.doc.rect(this.margin, this.yPos, this.pageWidth - 2 * this.margin, 25, 'F');

    // Customer info
    this.doc.setFontSize(12);
    this.setColor(this.colors.text);
    this.doc.text('CUSTOMER INFORMATION', this.margin + 5, this.yPos + 8);
    
    this.doc.setFontSize(10);
    this.doc.text(`Customer Name: ${data.userName}`, this.margin + 5, this.yPos + 16);
    this.doc.text(`Generated by: Royal Box Calculist System`, this.margin + 5, this.yPos + 22);

    this.yPos += 35;
  }

  // Add specifications section
  private addSpecifications(data: PDFQuotationData) {
    this.doc.setFontSize(14);
    this.setColor(this.colors.primary);
    this.doc.text('SPECIFICATIONS', this.margin, this.yPos);
    this.yPos += 10;

    // Specifications box
    this.setColor(this.colors.lightGray, 'fill');
    const specHeight = Object.keys(data.specifications).length * 8 + 10;
    this.doc.rect(this.margin, this.yPos, this.pageWidth - 2 * this.margin, specHeight, 'F');

    this.doc.setFontSize(10);
    this.setColor(this.colors.text);
    this.yPos += 8;

    Object.entries(data.specifications).forEach(([key, value]) => {
      if (typeof value === 'object') return; // Skip complex objects
      
      const label = key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1');
      this.doc.text(`${label}:`, this.margin + 5, this.yPos);
      this.doc.text(`${value}`, this.margin + 80, this.yPos);
      this.yPos += 8;
    });

    this.yPos += 10;
  }

  // Add cost breakdown section
  private addCostBreakdown(data: PDFQuotationData) {
    this.doc.setFontSize(14);
    this.setColor(this.colors.primary);
    this.doc.text('COST BREAKDOWN', this.margin, this.yPos);
    this.yPos += 15;

    // Cost items
    this.doc.setFontSize(10);
    this.setColor(this.colors.text);

    data.costBreakdown.items.forEach(item => {
      if (item.isSubtotal) {
        // Subtotal line
        this.setColor(this.colors.secondary, 'draw');
        this.doc.line(this.margin, this.yPos - 2, this.pageWidth - this.margin, this.yPos - 2);
        this.doc.setFontSize(11);
        this.setColor(this.colors.text);
      } else {
        this.doc.setFontSize(10);
        this.setColor(this.colors.text);
      }

      this.doc.text(item.label, this.margin + 5, this.yPos);
      this.doc.text(`Rs. ${item.value.toLocaleString('en-IN')}`, this.pageWidth - this.margin - 5, this.yPos, { align: 'right' });
      this.yPos += 10;
    });

    // Add-ons if any
    if (data.addOns && data.addOns.length > 0) {
      this.yPos += 5;
      this.doc.setFontSize(11);
      this.setColor(this.colors.success);
      this.doc.text('ADDITIONAL COSTS:', this.margin + 5, this.yPos);
      this.yPos += 10;

      this.doc.setFontSize(10);
      this.setColor(this.colors.text);
      data.addOns.forEach(addon => {
        this.doc.text(`â€¢ ${addon.description}`, this.margin + 10, this.yPos);
        this.doc.text(`Rs. ${addon.cost.toLocaleString('en-IN')}`, this.pageWidth - this.margin - 5, this.yPos, { align: 'right' });
        this.yPos += 8;
      });
    }

    // Subtotal
    this.yPos += 5;
    this.setColor(this.colors.secondary, 'draw');
    this.doc.line(this.margin, this.yPos, this.pageWidth - this.margin, this.yPos);
    this.yPos += 10;

    this.doc.setFontSize(11);
    this.setColor(this.colors.text);
    this.doc.text('Subtotal:', this.margin + 5, this.yPos);
    this.doc.text(`Rs. ${data.costBreakdown.subtotal.toLocaleString('en-IN')}`, this.pageWidth - this.margin - 5, this.yPos, { align: 'right' });
    this.yPos += 12;

    // GST
    this.doc.text(`GST (${data.costBreakdown.gstRate}%):`, this.margin + 5, this.yPos);
    this.doc.text(`Rs. ${data.costBreakdown.gstAmount.toLocaleString('en-IN')}`, this.pageWidth - this.margin - 5, this.yPos, { align: 'right' });
    this.yPos += 12;

    // Shipping
    this.doc.text(`Shipping (${data.costBreakdown.shippingWeight}kg):`, this.margin + 5, this.yPos);
    if (data.costBreakdown.isFreeShipping) {
      this.setColor(this.colors.success);
      this.doc.text('FREE', this.pageWidth - this.margin - 5, this.yPos, { align: 'right' });
    } else {
      this.setColor(this.colors.text);
      this.doc.text(`Rs. ${data.costBreakdown.shippingCharges.toLocaleString('en-IN')}`, this.pageWidth - this.margin - 5, this.yPos, { align: 'right' });
    }
    this.yPos += 15;

    // Final total box
    this.setColor(this.colors.primary, 'fill');
    this.doc.rect(this.margin, this.yPos, this.pageWidth - 2 * this.margin, 20, 'F');

    this.doc.setFontSize(16);
    this.setColor(this.colors.white);
    this.doc.text('FINAL TOTAL:', this.margin + 5, this.yPos + 12);
    this.doc.text(`Rs. ${data.costBreakdown.finalTotal.toLocaleString('en-IN')}`, this.pageWidth - this.margin - 5, this.yPos + 12, { align: 'right' });

    this.yPos += 30;

    // Per unit cost
    this.doc.setFontSize(12);
    this.setColor(this.colors.text);
    this.doc.text('Per Unit Cost:', this.margin + 5, this.yPos);
    this.doc.text(`Rs. ${data.costBreakdown.perUnitCost.toFixed(2)}`, this.pageWidth - this.margin - 5, this.yPos, { align: 'right' });
    this.yPos += 20;
  }

  // Add footer
  private addFooter() {
    const footerY = this.pageHeight - 30;
    
    // Footer background
    this.setColor(this.colors.lightGray, 'fill');
    this.doc.rect(0, footerY, this.pageWidth, 30, 'F');

    // Footer text
    this.doc.setFontSize(8);
    this.setColor(this.colors.secondary);
    this.doc.text('This is a computer generated quotation. All prices are in Indian Rupees.', this.margin, footerY + 10);
    this.doc.text('Valid for 30 days from the date of generation.', this.margin, footerY + 18);
    this.doc.text('Terms & Conditions apply. Contact us for any queries.', this.margin, footerY + 26);

    // Company info (right aligned)
    this.doc.text('Royal Box Calculist', this.pageWidth - this.margin, footerY + 10, { align: 'right' });
    this.doc.text('Professional Printing Solutions', this.pageWidth - this.margin, footerY + 18, { align: 'right' });
  }

  // Generate and save PDF
  public generatePDF(data: PDFQuotationData): void {
    this.addHeader(data);
    this.addCustomerInfo(data);
    this.addSpecifications(data);
    this.addCostBreakdown(data);
    this.addFooter();

    // Save the PDF
    const fileName = `${data.type.toUpperCase()}-Quote-${data.quoteRef}-${new Date().toISOString().split('T')[0]}.pdf`;
    this.doc.save(fileName);
  }
}
